; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\Users\Yun\Documents\Visual Studio 2015\Projects\ConsoleApplication2\ConsoleApplication2\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_towers
PUBLIC	_main
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_UninitUse:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\yun\documents\visual studio 2015\projects\consoleapplication2\consoleapplication2\main.c
;	COMDAT _main
_TEXT	SEGMENT
$T1 = -209						; size = 1
_num$ = -8						; size = 4
_main	PROC						; COMDAT

; 10   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T1[ebp], 0

; 11   : 	int num;
; 12   : 	towers(num, 'A', 'C', 'B');

	cmp	BYTE PTR $T1[ebp], 0
	jne	SHORT $LN3@main
	push	OFFSET $LN4@main
	call	__RTC_UninitUse
	add	esp, 4
$LN3@main:
	push	66					; 00000042H
	push	67					; 00000043H
	push	65					; 00000041H
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	call	_towers
	add	esp, 16					; 00000010H

; 13   : 	return 0;

	xor	eax, eax

; 14   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@main:
$LN4@main:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\yun\documents\visual studio 2015\projects\consoleapplication2\consoleapplication2\main.c
;	COMDAT _towers
_TEXT	SEGMENT
_num$ = 8						; size = 4
_frompeg$ = 12						; size = 1
_topeg$ = 16						; size = 1
_auxpeg$ = 20						; size = 1
_towers	PROC						; COMDAT

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18   : 	if (num == 1)

	cmp	DWORD PTR _num$[ebp], 1
	jne	SHORT $LN2@towers

; 19   : 	{
; 20   : 		return;

	jmp	SHORT $LN1@towers
$LN2@towers:

; 21   : 	}
; 22   : 	towers(num - 1, frompeg, auxpeg, topeg);

	movzx	eax, BYTE PTR _topeg$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _auxpeg$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _frompeg$[ebp]
	push	edx
	mov	eax, DWORD PTR _num$[ebp]
	sub	eax, 1
	push	eax
	call	_towers
	add	esp, 16					; 00000010H

; 23   : 
; 24   : 	towers(num - 1, auxpeg, topeg, frompeg);

	movzx	eax, BYTE PTR _frompeg$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _topeg$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _auxpeg$[ebp]
	push	edx
	mov	eax, DWORD PTR _num$[ebp]
	sub	eax, 1
	push	eax
	call	_towers
	add	esp, 16					; 00000010H
$LN1@towers:

; 25   : 
; 26   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_towers	ENDP
_TEXT	ENDS
END
